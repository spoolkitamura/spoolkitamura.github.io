/* Generated by Opal 0.11.4 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};
